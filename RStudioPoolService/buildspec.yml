version: 0.2

env:
  variables:
    MIN_FREE_INSTANCES: $MIN_FREE_INSTANCES
    MAX_INSTANCES: $MAX_INSTANCES
    IMAGE_ID: $IMAGE_ID
    IMAGE_TYPE: $IMAGE_TYPE
    REGION: $REGION
    ACCOUNT: $ACCOUNT
    SECURITY_GROUP: $SECURITY_GROUP
    INSTANCE_PROFILE: $INSTANCE_PROFILE
    KEY_NAME: $KEY_NAME
phases:
  install:
    commands:
      - cd RStudioPoolService
      # Install all dependencies (including dependencies for running tests)
      - npm install
      - echo "API_BASE IS $API_BASE"
  pre_build:
    commands:
      # Discover and run unit tests in the '__tests__' directory
      - printenv > .env
      - npm run test
      # Remove all unit tests to reduce the size of the package that will be ultimately uploaded to Lambda
      - rm -rf ./__tests__
      # Remove all dependencies not needed for the Lambda deployment package (the packages from devDependencies in package.json)
      - npm prune --production
  build:
    commands:
      - echo Build started on `date`
      - echo Entered the build phase ...
      # Use AWS SAM to package the application by using AWS CloudFormation - sam package command is an alias for the aws cloudformation
      - sam package --template template.yml --s3-bucket aws-sam-cli-managed-default-samclisourcebucket-81qiwpvg6puh --output-template-file template-export.yml
  post_build:
    commands:
      - sam deploy --template-file template-export.yml --stack-name r-studio-pool-service --capabilities CAPABILITY_IAM
artifacts:
  type: zip
  files:
    - template.yml
    - template-export.yml
